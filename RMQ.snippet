<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>RMQ</Title>
      <Shortcut>RMQ</Shortcut>
      <Description>遅延セグ木</Description>
      <Author></Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false"></Literal>
      </Declarations>
      <Code Language="CPP">
        <![CDATA[//***********//
/* RMQ：[0,n-1] について、区間ごとの最小値を管理する構造体
    set(int i, T x), build(): i番目の要素をxにセット。まとめてセグ木を構築する。O(n)
    update(i,x): i 番目の要素を x に更新。O(log(n))
    query(a,b): [a,b) での最小の要素を取得。O(log(n))
    find_rightest(a,b,x): [a,b) で x以下の要素を持つ最右位置を求める。O(log(n))
    find_leftest(a,b,x): [a,b) で x以下の要素を持つ最左位置を求める。O(log(n))
*/
template <typename T>
struct RMQ {
    const T e = numeric_limits<T>::max();
    ll n;
    vector<T> dat;
    RMQ(ll n_) : n(), dat(n_ * 4, e) {
        ll x = 1;
        while (n_ > x) x *= 2;
        n = x;
    }
    void set(ll i, T x) { dat[i + n - 1] = x; }
    void build() {
        for (ll k = n - 2; k >= 0; k--) dat[k] = min(dat[2 * k + 1], dat[2 * k + 2]);
    }
    void update(ll i, T x) {
        i += n - 1; dat[i] = x;
        while (i > 0) {
            i = (i - 1) / 2;  // parent
            dat[i] = min(dat[i * 2 + 1], dat[i * 2 + 2]);
        }
    }
    // the minimum element of [a,b)
    T query(ll a, ll b) { return query_sub(a, b, 0, 0, n); }
    T query_sub(ll a, ll b, ll k, ll l, ll r) {
        if (r <= a || b <= l) return e;
        else if (a <= l && r <= b) return dat[k];
        else {
            T vl = query_sub(a, b, k * 2 + 1, l, (l + r) / 2);
            T vr = query_sub(a, b, k * 2 + 2, (l + r) / 2, r);
            return min(vl, vr);
        }
    }
    T find_rightest(ll a, ll b, ll x) { return find_rightest_sub(a, b, x, 0, 0, n); }
    T find_leftest(ll a, ll b, ll x) { return find_leftest_sub(a, b, x, 0, 0, n); }
    T find_rightest_sub(ll a, ll b, ll x, ll k, ll l, ll r) {
        // 自分の値がxより大きい or [a,b)が[l,r)の範囲外ならreturn a-1
        if (dat[k] > x || r <= a || b <= l) return a - 1;
        // 自分が葉ならその位置をreturn
        else if (k >= n - 1) return (k - (n - 1));
        else {
            ll vr = find_rightest_sub(a, b, x, 2 * k + 2, (l + r) / 2, r);
            // 右の部分木を見て a-1 以外ならreturn
            if (vr != a - 1) return vr;
            // 左の部分木を見て値をreturn
            else return find_rightest_sub(a, b, x, 2 * k + 1, l, (l + r) / 2);
        }
    }
    T find_leftest_sub(ll a, ll b, ll x, ll k, ll l, ll r) {
        // 自分の値がxより大きい or [a,b)が[l,r)の範囲外ならreturn b
        if (dat[k] > x || r <= a || b <= l) return b;
        // 自分が葉ならその位置をreturn
        else if (k >= n - 1) return (k - (n - 1));
        else {
            ll vl = find_leftest_sub(a, b, x, 2 * k + 1, l, (l + r) / 2);
            // 左の部分木を見て b 以外ならreturn
            if (vl != b) return vl;
            // 右の部分木を見て値をreturn
            else return find_leftest_sub(a, b, x, 2 * k + 2, (l + r) / 2, r);
        }
    }
};$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>